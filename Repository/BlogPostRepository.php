<?php

namespace SKCMS\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use SKCMS\BlogBundle\Entity\BlogPost;
use SKCMS\BlogBundle\Entity\BlogTag;
use SKCMS\CoreBundle\Repository\SKEntityRepository;

/**
 * BlogPostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogPostRepository extends SKEntityRepository
{
    public function findPreviousPost(BlogPost $post,$locale = null){
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.id<:id')
            ->orderBy('p.id','DESC')
            ->setMaxResults(1)
            ->setParameter('id',$post->getId())
            ->leftJoin('p.picture','pi')
            ->addSelect('pi')

        ;
        return $this->getOneOrNullResult($qb,$locale);
    }
    public function findNextPost(BlogPost $post,$locale = null){
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.id>:id')
            ->orderBy('p.id','ASC')
            ->setMaxResults(1)
            ->setParameter('id',$post->getId())
            ->leftJoin('p.picture','pi')
            ->addSelect('pi')

        ;
        return $this->getOneOrNullResult($qb,$locale);
    }

    public function findByTag(BlogTag $tag,$page,$locale = null,$maxResult=10){
        $qb = $this->createQueryBuilder('p');

        $qb->leftJoin('p.tags','t')
            ->where('t.id=:tagId')
            ->setParameter('tagId',$tag->getId())
            ->orderBy('p.creationDate','DESC')
            ->setMaxResults($maxResult)
            ->setFirstResult(($page-1) *$maxResult)
            ;
        return $this->getResult($qb,$locale);
    }
    public function countByTag(BlogTag $tag){
        $qb = $this->createQueryBuilder('p');

        $qb
            ->select('COUNT (p.id)')
            ->leftJoin('p.tags','t')
            ->where('t.id=:tagId')
            ->setParameter('tagId',$tag->getId())

            ;
        return $this->getScalarResult($qb);
    }
}
